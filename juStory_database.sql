-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.book_purchases
(
    book_id integer NOT NULL,
    purchase_id integer NOT NULL,
    CONSTRAINT book_purchases_pkey PRIMARY KEY (book_id, purchase_id)
);

CREATE TABLE IF NOT EXISTS public.book_subscriptions
(
    book_id integer NOT NULL,
    subscription_id integer NOT NULL,
    CONSTRAINT book_subscription_pkey PRIMARY KEY (book_id, subscription_id)
);

CREATE TABLE IF NOT EXISTS public.books
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    title character varying COLLATE pg_catalog."default" NOT NULL,
    author character varying COLLATE pg_catalog."default" NOT NULL,
    isbn bigint NOT NULL,
    date date NOT NULL,
    language character varying COLLATE pg_catalog."default" NOT NULL,
    image character varying COLLATE pg_catalog."default" NOT NULL,
    description character varying(2000) COLLATE pg_catalog."default",
    last_modified timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT id PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.platforms
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    image character varying(255) COLLATE pg_catalog."default" NOT NULL,
    link character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT platforms_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.purchases
(
    id integer NOT NULL DEFAULT nextval('purchases_id_seq'::regclass),
    platform_id integer,
    digital_version character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT purchases_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.subscriptions
(
    id integer NOT NULL DEFAULT nextval('subscriptions_id_seq'::regclass),
    platform_id integer,
    digital_version character varying(50) COLLATE pg_catalog."default",
    CONSTRAINT subscriptions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.to_read
(
    user_id integer NOT NULL,
    book_id integer NOT NULL,
    "timestamp" timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS public.users
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    id_user_details integer NOT NULL DEFAULT 0,
    role character varying(255) COLLATE pg_catalog."default" NOT NULL DEFAULT 'user'::character varying,
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users_details
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    phone bigint NOT NULL,
    CONSTRAINT id_details PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.book_purchases
    ADD CONSTRAINT fk_book_purchases_book_id FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.book_purchases
    ADD CONSTRAINT fk_book_purchases_purchase_id FOREIGN KEY (purchase_id)
    REFERENCES public.purchases (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.book_subscriptions
    ADD CONSTRAINT fk_book_subscription_book_id FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.book_subscriptions
    ADD CONSTRAINT fk_book_subscription_subscription_id FOREIGN KEY (subscription_id)
    REFERENCES public.subscriptions (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.purchases
    ADD CONSTRAINT purchases_platform_id_fkey FOREIGN KEY (platform_id)
    REFERENCES public.platforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.subscriptions
    ADD CONSTRAINT subscriptions_platform_id_fkey FOREIGN KEY (platform_id)
    REFERENCES public.platforms (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.to_read
    ADD CONSTRAINT id_books_fk FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.to_read
    ADD CONSTRAINT id_user_fk FOREIGN KEY (user_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_details_id FOREIGN KEY (id_user_details)
    REFERENCES public.users_details (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

END;

-- Trigger: trigger_book_purchases
-- DROP TRIGGER IF EXISTS trigger_book_purchases ON public.book_purchases;

CREATE OR REPLACE TRIGGER trigger_book_purchases
    AFTER INSERT
    ON public.book_purchases
    FOR EACH ROW
    EXECUTE FUNCTION public.update_book_last_modified();


-- Trigger: trigger_book_subscriptions

-- DROP TRIGGER IF EXISTS trigger_book_subscriptions ON public.book_subscriptions;

CREATE OR REPLACE TRIGGER trigger_book_subscriptions
    AFTER INSERT
    ON public.book_subscriptions
    FOR EACH ROW
    EXECUTE FUNCTION public.update_book_last_modified();


-- FUNCTION: public.update_book_last_modified()

-- DROP FUNCTION IF EXISTS public.update_book_last_modified();

CREATE OR REPLACE FUNCTION public.update_book_last_modified()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
    UPDATE books
    SET last_modified = CURRENT_TIMESTAMP
    WHERE id = NEW.book_id;

    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.update_book_last_modified()
    OWNER TO docker;
